import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Stack;
class TreeNode{
    int val;
    TreeNode left;
    TreeNode right;
    public TreeNode(int val){
        this.val=val;
    }
}
public class test {
    public ArrayList<Integer> preOrder(TreeNode root){
        Stack<TreeNode> stack=new Stack<>();
        ArrayList<Integer> list=new ArrayList<>();
        if(root==null)
            return list;
        stack.push(root);
        while(!stack.isEmpty()){
            TreeNode temp=stack.pop();
            list.add(temp.val);
            if(temp.right!=null){
                stack.push(temp.right);
            }
            if(temp.left!=null){
                stack.push(temp.left);
            }
        }
        return list;
    }
    public LinkedList<Integer> lastOrder(TreeNode root){
        LinkedList<Integer> list=new LinkedList<>();
        Stack<TreeNode> stack=new Stack<>();
        stack.push(root);
        if(root==null)
            return  list;
        while(!stack.isEmpty()){
            TreeNode temp=stack.pop();
            list.addFirst(temp.val);
            if(temp.left!=null)
                stack.add(temp.left);
            if(temp.right!=null)
                stack.add(temp.right);
        }
        return list;
    }
    public ArrayList<Integer> midOrder(TreeNode root){
        ArrayList<Integer> list=new ArrayList<>();
        Stack<TreeNode> stack=new Stack<>();
        TreeNode node=root;
        while(!stack.isEmpty()||node!=null){
            while(node!=null){
                stack.push(node);
                node=node.left;
            }
            TreeNode temp=stack.pop();
            list.add(temp.val);
            node=temp.right;
        }
        return list;
    }
    public  static  void main(String[] args){
        test a=new test();
        TreeNode root=new TreeNode(1);
        TreeNode left=new TreeNode(2);
        TreeNode right=new TreeNode(3);
        TreeNode leftLeft=new TreeNode(4);
        TreeNode rightRight=new TreeNode(5);
        root.left=left;
        root.right=right;
        left.left=leftLeft;
        right.right=rightRight;
        System.out.println(a.preOrder(root)+" 后序"+a.lastOrder(root)+" 中序"+a.midOrder(root));
    }
}


